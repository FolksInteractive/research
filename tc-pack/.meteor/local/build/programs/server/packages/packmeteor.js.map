{"version":3,"file":"/packages/packmeteor.js","sources":["packmeteor/meteor/packmeteor-server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,mC;AACA,2B;AACA,+B;;;AAGA,qB;AACA,oB;;AAEA,c;AACA,6B;;AAEA,I;AACA,kC;AACA,iB;AACA,4B;AACA,Y;AACA,2B;AACA,K;AACA,G;AACA,E;;AAEA,qD;AACA,2C;AACA,kB;AACA,G;;AAEA,iC;;AAEA,yB;;AAEA,6D;AACA,sC;;AAEA,2C;AACA,6B;AACA,K;AACA,K;;AAEA,0B;;AAEA,sC;AACA,2B;AACA,O;;AAEA,yB;;AAEA,qC;AACA,2B;AACA,K;;AAEA,8C;AACA,kC;;AAEA,8C;AACA,+C;AACA,uB;AACA,G","sourcesContent":["var crypto = Npm.require('crypto');\nvar fs = Npm.require('fs');\nvar path = Npm.require('path');\n\n\nvar beforeFiles = [];\nvar afterFiles = [];\n\nPackmeteor = {\n  config: function(options) {\n\n  },\n  addFile: function(url, before) {\n    if (before) {\n      beforeFiles.push(url);\n    } else {\n      afterFiles.push(url);\n    }\n  }\n};\n\nWebApp.connectHandlers.use(function(req, res, next) {\n  if (req.url !== '/packmeteor.manifest') {\n    return next();\n  }\n\n  var manifest = '#PACKMETEOR\\n';\n\n  manifest += '/' + '\\n';\n\n  _.each(WebApp.clientProgram.manifest, function (resource) {\n    if (resource.where === 'client') {\n\n      var url = resource.url.split('?')[0];\n      manifest += url + '\\n';\n    }\n  });\n\n  manifest += '#BEFORE\\n';\n\n  _.each(beforeFiles, function (url) {\n    manifest += url + '\\n';\n  });  \n\n  manifest += '#AFTER\\n';\n\n  _.each(afterFiles, function (url) {\n    manifest += url + '\\n';\n  });\n\n  // content length needs to be based on bytes\n  var body = new Buffer(manifest);\n\n  res.setHeader('Content-Type', 'text/plain');\n  res.setHeader('Content-Length', body.length);\n  return res.end(body);\n});\n"]}