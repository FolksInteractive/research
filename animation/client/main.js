
require("famous-polyfills"); // Add polyfills
require("famous/core/famous"); // Add the default css file

Engine = require("famous/core/Engine");

var context = Engine.createContext();
x = 100;
y = 100;
context.add(new AppView(context));
// Generated by CoffeeScript 1.3.3

//     var ContainerSurface, Draggable, Easing, Engine, EventFilter, EventHandler, GridLayout, ImageSurface, ModifierChain, RenderNode, ScrollContainer, Scrollview, SequentialLayout, SnapTransition, SpringTransition, StateModifier, Surface, Timer, Transform, Transitionable, View, WallTransition, background_surface, button_snap, check_for_modifiers, clear_cell_position, color, determine_collision, i, move_to_point, scroll_content, snap, spring, surface, wall, _i, _ref,
//     // _this = this;
//     // console.log(_this);
//     Engine = require('famous/core/Engine');
//     Surface = require('famous/core/Surface');
//     View = require('famous/core/View');
//     Transform = require('famous/core/Transform');
//     RenderNode = require('famous/core/RenderNode');
//     StateModifier = require('famous/modifiers/StateModifier');
//     Easing = require('famous/transitions/Easing');
//     Transitionable = require('famous/transitions/Transitionable');
//     SpringTransition = require('famous/transitions/SpringTransition');
//     WallTransition = require('famous/transitions/WallTransition');
//     SnapTransition = require('famous/transitions/SnapTransition');
//     EventHandler = require('famous/core/EventHandler');
//     EventFilter = require('famous/events/EventFilter');
//     Scrollview = require('famous/views/Scrollview');
//     ImageSurface = require('famous/surfaces/ImageSurface');
//     ContainerSurface = require('famous/surfaces/ContainerSurface');
//     SequentialLayout = require('famous/views/SequentialLayout');
//     ScrollContainer = require('famous/views/ScrollContainer');
//     Timer = require('famous/utilities/Timer');
//     Draggable = require('famous/modifiers/Draggable');
//     GridLayout = require('famous/views/GridLayout');
//     ModifierChain = require('famous/modifiers/ModifierChain');
//     Transitionable.registerMethod('wall', WallTransition);
//     Transitionable.registerMethod('spring', SpringTransition);
//     Transitionable.registerMethod('snap', SnapTransition);
//     wall = {
//       method: 'wall',
//       period: 300,
//       dampingRatio: 0.3
//     };
//     spring = {
//       method: 'spring',
//       period: 300,
//       dampingRatio: 0.4
//     };
//     snap = {
//       method: 'snap',
//       period: 400,
//       dampingRatio: 0.6
//     };
//     button_snap = {
//       method: 'snap',
//       period: 300,
//       dampingRatio: 0.4
//     };
//     var event_handler = new EventHandler();
//     var context = Engine.createContext();
//     context.setPerspective(1000);
//     var context_size = context.getSize();
//     var end_event = 'mouseup';
//     var move_event ='mousemove';
//     var start_event ='mousedown';
//     background_surface = new Surface({
//       size: [void 0, void 0],
//       properties: {
//         backgroundColor: 'black'
//       }
//     });
//     context.add(background_surface);
//     var num_cells = 12;
//     var min_width = 180;
//     var cells_x = Math.floor(context_size[0] / min_width);
//     var cells_y = Math.ceil(num_cells / cells_x);
//     var grid = new GridLayout({
//       dimensions: [cells_x, cells_y]
//     });
//     var grid_cells = [];
//     grid.sequenceFrom(grid_cells);
//     var grid_view_grid = new ContainerSurface({
//       size: [void 0, cells_y * 200]
//     });
//     var grid_view = new View({
//       size: [void 0, cells_y * 200]
//     });
//     scroll_content = [];
//     var grid_scroll = new Scrollview({
//       size: [void 0, void 0]
//     });
//     grid_scroll.sequenceFrom(scroll_content);
//     grid_view_grid.add(grid);
//     grid_view.pipe(grid_scroll);
//     grid_view_grid.pipe(grid_scroll);
//     var surfaces = [];
//     var surface_selected = null;
//     for (i = _i = 0, _ref = num_cells - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
//       color = "hsl(" + (i * 360 / 16) + ",100%,50%)";
//       surface = new Surface({
//         size: [void 0, void 0],
//         properties: {
//           backgroundColor: color,
//           border: '4px solid white',
//           cursor: 'move'
//         }
//       });
//       surface.pipe(grid_scroll);
//       surface.in_front = new StateModifier({
//         transform: Transform.inFront
//       });
//       surface.chain = new ModifierChain();
//       surface.state = new StateModifier({
//         size: [160, 160],
//         origin: [0.5, 0.5],
//         transform: Transform.translate(0, 0, 0)
//       });
//       surface.chain.addModifier(surface.state);
//       surface.draggable = new Draggable({
//         xRange: [0, context_size[0]],
//         yRange: [0, context_size[1]]
//       });
//       surface.draggable.surface = surface;
//       surface.draggable.on('start', function(e) {
//         var grid_size, _j, _len, _ref1;
//         if (!surface_selected){
//           surface_selected = e.origin.surface;
//           surface_selected.unpipe(grid_scroll);
//           surface_selected.view.chain.addModifier(_surface_selected.in_front);
//           _surface_selected.chain.addModifier(_surface_selected.in_front);
//           grid_size = _grid_view.getSize();
//           _surface_selected.draggable.setOptions({
//             xRange: [0, _context_size[0]],
//             yRange: [0, grid_size[1]]
//           });
//           _cleared_position = _surface_selected.index;
//           _ref1 = _surfaces;
//           for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
//             surface = _ref1[_j];
//             if (surface !== _surface_selected) {
//               surface.setProperties({
//                 pointerEvents: 'none'
//               });
//             }
//           }
//           _surface_selected.state.halt();
//           return _surface_selected.state.setSize([140, 140], snap);
//         }
//       });
// surface.draggable.on('update', function(e) {
//   return determine_collision(_surface_selected, false);
// });
// surface.draggable.on('end', function(e) {
//   var _j, _len, _ref1;
//   if (_surface_selected) {
//     _surface_selected.pipe(_grid_scroll);
//     _surface_selected.view.chain.removeModifier(_surface_selected.in_front);
//     _ref1 = _surfaces;
//     for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
//       surface = _ref1[_j];
//       surface.setProperties({
//         pointerEvents: 'all'
//       });
//     }
//     surface = _surface_selected;
//     _surface_selected.state.halt();
//     _surface_selected.state.setSize([160, 160], snap);
//     _surface_selected = null;
//   }
//   return determine_collision(surface, true);
// });
// surface.index = i;
// surface.view = new ContainerSurface({
//   size: [160, 160]
// });
// surface.view.pipe(grid_scroll);
// surface.pipe(surface.draggable);
// surface.view.add(surface.state).add(surface);
// surface.view.chain = new ModifierChain();
// surface.view.state = new StateModifier({
//   origin: [0, 0]
// });
// surface.view.chain.addModifier(surface.view.state);
// grid_view.add(surface.draggable).add(surface.view.chain).add(surface.view);
// surfaces.push(surface);
// }
// scroll_content.push(grid_view);
// context.add(grid_view_grid);
// context.add(grid_scroll);
// check_for_modifiers = function() {
//   var cell_size, _j, _len, _ref1;
//   if (_grid._modifiers && _grid._modifiers.length > 0) {
//     cell_size = _grid._modifiers[0].getSize();
//     _ref1 = _surfaces;
//     for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
//       surface = _ref1[_j];
//       move_to_point(surface, surface.index);
//     }
//     return Engine.removeListener('prerender', check_for_modifiers);
//   }
// };
// Engine.on('prerender', check_for_modifiers);
// Engine.on('resize', function() {
//   var _j, _len, _ref1, _results;
//   if (_grid._modifiers && _grid._modifiers.length > 0) {
//     _context_size = _context.getSize();
//     _cells_x = Math.floor(_context_size[0] / _min_width);
//     _cells_y = Math.ceil(_num_cells / _cells_x);
//     _grid_view_grid.setSize([void 0, _cells_y * 200]);
//     _grid_view.setOptions({
//       size: [void 0, _cells_y * 200]
//     });
//     _grid.setOptions({
//       dimensions: [_cells_x, _cells_y]
//     });
//     _ref1 = _surfaces;
//     _results = [];
//     for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
//       surface = _ref1[_j];
//       _results.push(move_to_point(surface, surface.index, {
//         duration: 0
//       }));
//     }
//     return _results;
//   }
// });
// move_to_point = function(surface, p, transition) {
//   var center, center_offset, modifier, size, surface_size, translate;
//   if (!transition) {
//     transition = snap;
//   }
//   modifier = _grid._modifiers[p];
//   translate = Transform.interpret(modifier.getTransform())['translate'];
//   size = modifier.getSize();
//   center = [translate[0] + Math.round(size[0] / 2.0), translate[1] + Math.round(size[1] / 2.0), 0];
//   surface_size = [160, 160];
//   center_offset = [center[0] - Math.round(surface_size[0] / 2.0), center[1] - Math.round(surface_size[1] / 2.0), 0];
//   return surface.draggable.setPosition(center_offset, transition, (function() {
//     return state.setTransform(Transform.translate(0, 0, 0));
//   }).bind(surface));
// };
// determine_collision = function(surface, move) {
//   var index, modifier, scroll_pos, size, surface_center, surface_position, surface_size, translate, x_fit, y_fit, _j, _len, _ref1, _results;
//   if (move == null) {
//     move = false;
//   }
//   surface_size = [160, 160];
//   surface_position = surface.draggable.getPosition();
//   scroll_pos = _grid_scroll.getPosition();
//   surface_center = [surface_position[0] + (surface_size[0] / 2.0), surface_position[1] + (surface_size[1] / 2.0)];
//   index = 0;
//   _ref1 = _grid._modifiers;
//   _results = [];
//   for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
//     modifier = _ref1[_j];
//     translate = Transform.interpret(modifier.getTransform())['translate'];
//     size = modifier.getSize();
//     x_fit = surface_center[0] > translate[0] && surface_center[0] < (translate[0] + size[0]);
//     y_fit = surface_center[1] > translate[1] && surface_center[1] < (translate[1] + size[1]);
//     if (x_fit && y_fit) {
//       clear_cell_position(index);
//       if (move) {
//         move_to_point(surface, index);
//       }
//       break;
//     } else {
//       _results.push(index += 1);
//     }
//   }
//   return _results;
// };
// return clear_cell_position = function(index) {
//   var _j, _len, _ref1;
//   if (index !== _cleared_position) {
//     _ref1 = _surfaces;
//     for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
//       surface = _ref1[_j];
//       if (surface.index > _cleared_position && surface.index <= index) {
//         if (surface.index === 0) {
//           surface.index = _num_cells - 1;
//         } else {
//           surface.index = surface.index - 1;
//         }
//         move_to_point(surface, surface.index);
//       } else if (surface.index < _cleared_position && surface.index >= index) {
//         if (surface.index === (_num_cells - 1)) {
//           surface.index = 0;
//         } else {
//           surface.index = surface.index + 1;
//         }
//         move_to_point(surface, surface.index);
//       }
//     }
//     _surface_selected.index = index;
//     return _cleared_position = index;
//   }
// };




